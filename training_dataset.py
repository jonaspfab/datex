"""
The training_dataset module is responsible for the initialization as well as the
tracking of the training dataset. Additionally it provides the training dataset
to the training_dataset_processor module.
"""

from abc import ABC, abstractmethod


class Example(ABC):
    """Represents a member of a training dataset.

    Each example of a training dataset contains two properties:
        - image: Image that the example is referencing
        - label: String describing the object depicted in the image
    """

    @abstractmethod
    def get_image(self):
        pass

    @abstractmethod
    def set_image(self, image):
        pass

    @abstractmethod
    def get_label(self) -> str:
        pass


class TrainingDatasetVisitor(ABC):
    """Abstract class can be implemented by a class to visit each example of a training dataset.

    A class that implements the TrainingDatasetVisitor can invoke the accept method of the
    TrainingDataset to visit it. Subsequently the accept method of every Example is invoked
    which calls the visit method of the TrainingDatasetVisitor.
    """

    @abstractmethod
    def visit(self, example: Example):
        """Called by every Example object of a training dataset which passes itself as a reference"""
        pass
    

class TrainingDataset(ABC):
    """The TrainingDataset tracks all examples that were read from the image_file_manager module and
    generated by the training_dataset_processor module"""

    @abstractmethod
    def make_training_dataset(self, images):
        """Method called by the image_file_manager module to initialize the training dataset

        @:param images: List of tuples containing the images and their labels
        """
        pass

    @abstractmethod
    def reset_training_dataset(self):
        """Method called by the image_file_manager module to delete all examples after the training
        dataset is saved on the file system"""
        pass

    def accept(self, visitor: TrainingDatasetVisitor):
        """Method can be invoked by a TrainingDatasetVisitor to visit each example of the training dataset"""
        pass

    def add_example(self, label: str, image):
        """Add an additional example to the training dataset"""
        pass

    def count(self):
        """Returns the number of examples in the training dataset"""
        pass


class TrainingSetDelegate(ABC):
    """Abstract class which provides method to receive a training dataset"""

    @abstractmethod
    def receive_dataset(self, dataset: TrainingDataset):
        pass


class ExampleImpl(Example):

    def __init__(self, label: str, image):
        self.label = label
        self.image = image

    def accept(self, visitor: TrainingDatasetVisitor):
        visitor.visit(self)

    def get_image(self):
        return self.image

    def get_label(self) -> str:
        return self.label

    def set_image(self, image):
        self.image = image


class TrainingDatasetImpl(TrainingDataset):

    def __init__(self, processing_delegate: TrainingSetDelegate):
        self.examples: [Example] = []
        self.dataset_file_delegate: TrainingSetDelegate = None
        self.processing_delegate: TrainingSetDelegate = processing_delegate

    def make_training_dataset(self, images):
        for image in images:
            label = image[0]
            image = image[1]

            new_example = ExampleImpl(label, image)
            self.examples.append(new_example)

        self.processing_delegate.receive_dataset(self)

    def reset_training_dataset(self):
        self.examples = []

    def accept(self, visitor: TrainingDatasetVisitor):
        """Invokes the accept method for each example of the training dataset"""
        examples = list(self.examples)

        for example in examples:
            example.accept(visitor)

    def add_example(self, label: str, image):
        new_example = ExampleImpl(label, image)

        self.examples.append(new_example)

    def count(self):
        return len(self.examples)
